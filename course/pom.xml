<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent><!-- INFORMA DE QUEM ESTAMOS HERDANDO AS CONFIGURAÇÕES DO SUPER (POM.XML) DEFINIDO-->
        <groupId>br.com.uanderson</groupId>
        <artifactId>springboot-microservices</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath> <!-- LOCALIZAÇÃO DO ARQUIVO DE CONFIGURAÇÕES/DEPENDÊNCIAS HERDADAS -->
    </parent>

    <!--TEMOS AS CONFIGURAÇÕES DEFAULTS DO MODULO/APLICAÇÃO CRIADO-->
    <artifactId>course</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>course</name>
    <description>Spring Boot Microservices by DevDojo</description>

    <properties>
        <java.version>11</java.version>
    </properties>

    <dependencies>

    </dependencies>

    <build><!--ONDE DEFINIMOS OS PLUGINS QUE SERÃO UTILIZADOS EM ALGUM CICLO DE VIDA DO MAVEN-->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
        <!--
        O ciclo de vida do Maven:
            compile - compila o código fonte do projeto
            test - executa os testes unitários do código compilado, usando uma ferramenta de testes unitários, como o junit.
            package - empacota o código compilado de acordo com o empacotamento escolhido, por exemplo, em JAR.
            integration-test - processa e faz o deploy do pacote em um ambiente onde os testes de integração podem ser rodados.
            install - instala o pacote no repositório local, para ser usado como dependência de outros projetos locais
            deploy - feito em ambiente de integração ou de release, copia o pacote final para um repositório remoto para ser compartilhado entre desenvolvedores e projetos

        Você pode invocar qualquer dessas fases na linha de comando, digitando:

        mvn [fase]
        -->